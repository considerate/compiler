module punkt0.TypeCheck where

b = b

{-

import punkt0.Analyzer
import Data.HashMap
import punkt0.Positioned
import punkt0.Reporter
import Data.Traversable(traverse)
import Data.List(sort)
import punkt0.parser.Grammar
import punkt0.ScalaShow
import lexer.Lexer(scanTokens, FileIterator)
import parser.Parser(parse)
import punkt0.lexer.Tokens as Tokens()

type TypeCheck a = Environment -> Accumulate [TypeError] a

typeVar :: Identifier -> TypeCheck TType
typeVar identifier
    = maybe
        (report1 $ NotDeclared identifier.str identifier.pos)
        (pure . fst)
        (lookup (identifier.str) environment.vars)

unify :: TType -> TType -> Position -> TypeCheck TType
unify t t2 pos =
    if t == t2 -- TODO: Change to upper bound of t2 is upper bound of t
        then pure t
        else report1 $ (Unification t t2 pos)

assertType :: TType -> TypeCheck TType -> Position -> TypeCheck TType
assertType t result pos = case result of
    ARight t2 -> unify t t2 pos
    errors -> errors

assertEqual :: TypeCheck TType -> TypeCheck TType -> Position -> TypeCheck TType
assertEqual res1 res2 pos = case (res1, res2) of
    (ARight t, ARight t2) -> unify t t2 pos
    _ -> res1 *> res2 -- this will merge the errors from the results

typeBinaryOp :: Environment -> BinOp -> Expression -> Expression -> Position -> TypeCheck TType
typeBinaryOp environment Plus lhs rhs pos
    = case (typeExpression environment lhs, typeExpression environment rhs) of
        (ARight TInt, ARight TInt) -> pure TInt
        (ARight TInt, ARight TString) -> pure TString
        (ARight TString, ARight TInt) -> pure TString
        (ARight TString, ARight TString) -> pure TString
        (ARight t, ARight t2) -> report1 (InvalidAddOperands t t2 pos)
        (res1, res2) -> res1 *> res2
typeBinaryOp environment And lhs rhs pos
    = assertType TBool (typeExpression environment lhs) pos
    *> assertType TBool (typeExpression environment rhs) pos
typeBinaryOp environment Or lhs rhs pos
    = assertType TBool (typeExpression environment lhs) pos
    *> assertType TBool (typeExpression environment rhs) pos
typeBinaryOp environment Equals lhs rhs pos
    = case (typeExpression environment lhs, typeExpression environment rhs) of
        (ARight (TClass _ _), ARight (TClass _ _)) -> pure TBool
        (ARight (TClass _ _), ARight _) -> report1 (InvalidEq pos)
        (ARight _, ARight (TClass _ _)) -> report1 (InvalidEq pos)
        (ARight t, ARight t2)  -> unify t t2 pos
        (res1, res2) -> res1 *> res2
typeBinaryOp environment LessThan lhs rhs pos
    = typeBinaryOp environment Equals lhs rhs pos -- same rules as for equality
typeBinaryOp environment Minus lhs rhs pos
    = case (typeExpression environment lhs, typeExpression environment rhs) of
        (ARight TInt, ARight TInt) -> pure TInt
        (ARight t, ARight t2) -> report1 (InvalidNumOperands t t2 pos)
        (res1, res2) -> res1 *> res2
typeBinaryOp environment Times lhs rhs pos
    = typeBinaryOp environment Minus lhs rhs pos
typeBinaryOp environment Div lhs rhs pos
    = typeBinaryOp environment Minus lhs rhs pos

getClass :: Environment -> String -> Position -> TypeCheck TType
getClass environment obj pos
    = maybe
        (report1 (NotDeclared obj pos))
        (pure . fst)
        (lookup obj (environment.classes))

typeExpression :: Environment -> Expression -> TypeCheck TType
typeExpression _ (LitInt{}) = pure TInt
typeExpression _ (LitString{}) = pure TString
typeExpression _ (LitTrue{}) = pure TBool
typeExpression _ (LitFalse{}) = pure TBool
typeExpression _ (LitNull{}) = pure TUnit
typeExpression environment (New{obj, pos}) = getClass environment (obj.str) pos
typeExpression environment (Identifier{id})
    = typeVar environment id
typeExpression environment (LitThis pos)
    = maybe
        (report1 (InvalidThis pos))
        (pure . fst)
        (lookup "this" environment.vars)
typeExpression environment (BinOp{lhs, op, rhs, pos}) = typeBinaryOp environment op lhs rhs pos
typeExpression environment (Not {expr, pos})
    = assertType TBool (typeExpression environment expr) pos
typeExpression environment (Block es _)
    = fmap last $ traverse (typeExpression environment) es
typeExpression environment (If predicate body Nothing pos)
    = assertType TBool (typeExpression environment predicate) pos
    *> typeExpression environment body
typeExpression environment (If predicate body (Just elseBody) pos)
    = assertType TBool (typeExpression environment predicate) pos
    *> assertEqual (typeExpression environment body) (typeExpression environment elseBody) pos
typeExpression environment (While {predicate, body, pos})
    = assertType TBool (typeExpression environment predicate) pos
    *> typeExpression environment body
typeExpression environment (Println {expr})
    = typeExpression environment expr
    *> pure TUnit
typeExpression environment (Assign {var, expr, pos})
    = typeVar environment var
    *> typeExpression environment expr

typecheck
    = missing baseClass extends
    *> cycleChecks is
    *> (mapError show $ typeVar (Env empty empty empty) (ID "asd" initialPosition))
    where
        baseClass = "Any"
        extends = fromList [("a", "b"), ("b", "c"), ("c", "a"), ("d", "a"), ("e", "Any"), ("f", "e"), ("h", "missing")]
        is = inheritance baseClass extends


pos = initialPosition

main = do
    println typecheck
    println $ typeVar (Env empty empty empty) (ID "asd" pos)
    println $ typeVar (Env (fromList [("asd", (TInt, undefined))]) empty empty) (ID "asd" pos)
    println $ typeExpression (Env empty empty empty) (Block [LitInt 2 pos, LitString "asd" pos] pos)
    println . fmap (typeExpression (Env empty empty empty)) $ parseCode "if (true) {3;5} else 4" (expression <* tokenEOF)
    println . fmap (typeExpression (Env empty empty empty)) $ parseCode "if (false) {3;false} else true" (expression <* tokenEOF)
    println . fmap (typeExpression (Env empty empty empty)) $ parseCode "2 + 3" (expression <* tokenEOF)
    println . fmap (typeExpression (Env empty empty empty)) $ parseCode "2 + \"3\"" (expression <* tokenEOF)
    println . fmap (typeExpression (Env empty empty empty)) $ parseCode "    true + \"3\"" (expression <* tokenEOF)
    println . fmap (typeExpression (Env (fromList [("x", (TString, undefined))]) empty empty)) $ parseCode "2 + x" (expression <* tokenEOF)
    println . fmap (typeExpression (Env (fromList [("x", (TBool, undefined))]) empty empty)) $ parseCode "2 + x" (expression <* tokenEOF)

-}
