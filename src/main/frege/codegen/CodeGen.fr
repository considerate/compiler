module punkt0.codegen.CodeGen where
import punkt0.codegen.Scala
import punkt0.codegen.Instruction
import punkt0.parser.Grammar
import punkt0.analyzer.Analyzer
import punkt0.Typed
import Java.Util(LinkedList, List)
import Data.Traversable(traverse)

genCode :: CodeHandler -> [Instruction] -> IO CodeHandler
genCode startHandler is = foldM f startHandler is
    where
        f handler i
            = case getScalaI i of
                Gen g -> handler.append g
                Code c -> handler.append c

genMethod :: ClassName -> ClassFile -> MethodCode -> IO ClassFile
genMethod className cf (MethodCode{name,args,returnType,body})
    = ScalaList.fromList argTypes >>= \types ->
    cf.addMethod (javaType returnType) name types >>= \methodHandler ->
    methodHandler.codeHandler >>= \codeHandler ->
    genCode codeHandler body >>= \_ ->
    codeHandler.freeze >>= \_ ->
    pure cf
    where
        argTypes = fmap javaType args

declareField :: ClassName -> ClassFile -> Field -> IO ClassFile
declareField className cf (FieldCode{name,t})
    = cf.addField (javaType t) name >> pure cf

genClass :: Class -> IO ()
genClass (ClassCode{name,extends,fields,methods})
    = ClassFile.new name (toOption extends) >>= \cf ->
    foldM (declareField name) cf fields >>= \cf ->
    cf.setSourceFile "HW.java" >>= \_ ->
    cf.addConstructor (ScalaNil.nil) >>= \mm ->
    mm.codeHandler >>= \code ->
    genCode code constructor >>= \_ ->
    code.freeze >>= \_ ->
    foldM (genMethod name) cf methods >>= \cf ->
    cf.writeToFile (name ++ ".class")
    where
        super = fromMaybe "java/lang/Object" extends
        thisPtr = ALoad 0
        construct = InvokeSpecial super "<init>" (TMethod ([],TUnit))
        constructor = thisPtr : construct : concatMap (compileFieldInit name) fields ++ [Return]

genProgram :: Prog -> IO ()
genProgram (ProgramCode (classes, MainCode{name,body}))
    = traverse genClass classes
    >>= \_ -> ClassFile.new name (toOption Nothing)
    >>= \cf -> cf.setSourceFile "HW.java"
    >>= \_ -> cf.addDefaultConstructor
    >>= \_ -> cf.addMainMethod
    >>= \mm -> mm.codeHandler
    >>= \code -> genCode code body
    >>= \_ -> code.freeze
    >>= \_ -> cf.writeToFile (name ++ ".class")

--testCode = "class A{var x : Int = 3; def foo() : Unit = {println(\"Hello there ☺️\"); println(x)}} object Main extends App {new A().foo()}"
testCode = "class A{var x : Int = 3; def foo() : Unit = {println(x)}} object Main extends App {new A().foo()}"
-- testCode = "object Main extends App { println(\"Hello, Dear World!\")}"
--testCode = "object Main extends App {println(1+3/2*4)}"
--testCode = "object Main extends App {println(1+3)}"
main = let
        (Just ast) = parseCode program testCode
        -- Left errors = analyzer ast
        (Right ast') = analyzer ast
        prog = compileProgram ast'
    in print ast'
    >> genProgram prog
