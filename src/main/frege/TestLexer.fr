package test.frege.TestLexer where

import frege.test.QuickCheck
import lexer.Lexer (State)
import Data.Monoid

f :: [a] -> [a]  -- we should think of any such function
f  = reverse     -- that was our pick

g :: Int -> String
g x = show x ++ show x ++ show x

commutativity_map xs = property ( map g (f xs) == f (map g xs))

monoidAssocProp :: (Eq m, Monoid m) => m -> m -> m -> Property
monoidAssocProp x y z = property $ (x <> (y <> z)) == ((x <> y) <> z)

monoidLeftId :: (Eq m, Monoid m) => m -> Property
monoidLeftId x = property $ mempty <> x == x

monoidRightId :: (Eq m, Monoid m) => m -> Property
monoidRightId x = property $ x <> mempty == x

functorIdProp :: (Functor f, Eq (f a)) => f a -> Property
functorIdProp x = property $ (fmap id x) == x

instance Arbitrary Arbitrary a => (State a) where
    arbitrary = oneof [genTerminal, pure NonTerminal, pure Ignore]
        where
            genTerminal = fmap Terminal arbitrary

{-
data Fn a c =
    Pair (Fn a (Fn b c)) -> Fn (a,b) -> c
    | XOR (Fn a c) -> (Fn b c) -> Fn (Either a b) c
    | Unit c -> Fn () c
    | Nil
    Nil   :: a :-> c
    Table :: Eq a => [(a,c)] -> (a :-> c)
    Map   :: (a -> b) -> (b -> a) -> (b :-> c) -> (a :-> c)
data Fun a b = Fun (a :-> b, b, Bool) (a -> b)

functorCompProp :: (Functor f, Eq (f c)) => f a -> Fun a b -> Fun b c -> Property
functorCompProp x (Fun _ f) (Fun _ g) = property $ (fmap (g . f) x) == (fmap g . fmap f $ x)
-}

main = do
    quickCheck commutativity_map
    quickCheck (monoidAssocProp :: [Int] -> [Int] -> [Int] -> Property)
    quickCheck (monoidLeftId :: [Int] -> Property)
    quickCheck (functorIdProp :: [Int] -> Property)
    quickCheck (functorIdProp :: State Int -> Property)

