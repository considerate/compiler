module punkt0.parser.Pretty where
import punkt0.parser.Grammar hiding (wrap)
import Data.List

prettyPrint :: (Pretty a) => a -> String
prettyPrint x = unwords . map show $ pretty x

class Pretty a where
    prettyf :: a -> ([Entry]->[Entry])

instance Show Entry where
    show (Word str) = str
    show (Char c) = packed [c]
    show (Brackets xs) = unwords $ "{\n" : (map show) xs ++ ["\n}\n"]
    show (Parens [xs@(Parens _)]) = show xs
    show (Parens xs) = "(" ++ unwords (map show xs) ++ ")"

intendent :: [Entry] -> [Entry]
intendent ((Brackets deeper):rest) = Brackets ((prettyf ' ') $ intendent $ intendent deeper) : intendent rest
intendent (other:rest) = other: intendent rest
intendent [] = []

pretty x = prettyf x []

data Entry = Word String | Brackets [Entry] | Parens [Entry] | Char Char

classk = (Word "class" :)
extendsk = (Word "extends" :)
object = (Word "object" :)

wrap :: ([a] -> Entry) -> ([a] -> [a]) -> ([Entry] -> [Entry])
wrap f xs = (f (xs []) :)

wrapf :: (a -> Entry) -> a -> ([Entry] -> [Entry])
wrapf f x = (f x :)

instance Pretty a => Pretty [a] where
    prettyf [] = id
    prettyf ( !x : !xs) = prettyf x • prettyf xs

instance Pretty Program where
    prettyf (Program classes functions main _) = prettyf classes • prettyf functions • prettyf main

instance Pretty FunctionDeclaration where
    prettyf (Function{name,expr}) = prettyf "fun " • prettyf name • prettyf '=' • prettyf expr • semicolon

instance Pretty ClassDeclaration where
    prettyf !Class{name,extends,vars,methods}
        = classk
        • (prettyf name)
        • prettyf (fmap (\x -> extendsk • prettyf x) extends)
        • wrap Brackets (prettyf vars • prettyf methods)

instance Pretty a => Pretty (Maybe a) where
    prettyf Nothing = id
    prettyf (Just x) = prettyf x

instance Pretty Entry where
    prettyf = (:)
instance Pretty ([Entry] -> [Entry]) where
    prettyf = id

instance Pretty MainDeclaration where
    prettyf !Main{name,extends,vars,body}
        = object
        • prettyf name
        • extendsk
        • prettyf extends
        • wrap Brackets (prettyf vars • unroll semicolon body)

instance Pretty Identifier where
    prettyf (ID str _) = (Word str :)
    prettyf (Symbol i _ _ (ID str _))
        | i == -1 = ((Word (str ++ "#??")) :)
        | otherwise = ((Word (str ++ "#" ++ show i)) :)

instance Pretty VarDeclaration where
    prettyf !Var{name,varType,expr}
        = var
        • prettyf name
        • colon
        • prettyf varType
        • eq
        • prettyf expr
        • semicolon

var = (Word "var" :)
colon = (Char ':' :)
eq = (Char '=' :)
semicolon = prettyf ";\n"

instance Pretty MethodDeclaration where
    prettyf !MethodDeclaration{override,name,args,returnType,vars,exprs} =
        (overridek override)
        • def
        • (prettyf name)
        • wrap Parens (unroll comma $ map prettyf args)
        • prettyf ':' • prettyf returnType • prettyf '='
        • wrap Brackets (prettyf vars • unroll semicolon exprs)

instance Pretty (Identifier,Type) where
    prettyf (i,t) = prettyf i • colon • prettyf t

overridek True = prettyf "override"
overridek False = id
def = prettyf "def"
comma = prettyf ','

unroll :: Pretty a => ([Entry] -> [Entry]) -> [a] -> ([Entry] -> [Entry])
unroll f (a:b:cs) = prettyf a • f • unroll f (b:cs)
unroll _ [x] = prettyf x
unroll _ [] = id

instance Pretty String where
    prettyf str = (Word str :)

instance Pretty Char where
    prettyf c = (Char c :)

instance Pretty Expression where
    prettyf (Typed _ expr)
        = prettyf expr
    prettyf (LitTrue _)
        = prettyf "true"
    prettyf (LitFalse _)
        = prettyf "false"
    prettyf (LitThis _)
        = prettyf "this"
    prettyf (LitNull _)
        = prettyf "null"
    prettyf (LitInt i _)
        = prettyf i
    prettyf (LitString str _)
        = prettyf ("\"" ++ str ++ "\"")
    prettyf (Identifier x _)
        = prettyf x
    prettyf (New x _)
        = prettyf "new" • prettyf x • prettyf "()"
    prettyf (Not x _)
        = wrap Parens $ prettyf '!' • prettyf x
    prettyf (Block xs _)
        = wrap Brackets $ unroll semicolon xs
    prettyf (Println x _)
        = prettyf "println" • wrap Parens (prettyf x)
    prettyf (BinOp a x b _)
        = wrap Parens $ prettyf a • prettyf x • prettyf b
    prettyf (MethodCall expr method args _)
        = wrap Parens
        $ prettyf expr
        • prettyf '.'
        • prettyf method
        • wrap Parens (unroll comma args)
    prettyf (If pred ifs buts _)
        = wrap Parens
        $ prettyf "if" • wrap Parens (prettyf pred)
        • prettyf '\n'
        • prettyf ifs
        • prettyf '\n'
        • prettyf (fmap (prettyf "else" •) (fmap prettyf buts))
        • prettyf '\n'
    prettyf (While pred body _)
        = wrap Parens
        $ prettyf "while" • wrap Parens (prettyf pred)
        • prettyf body
    prettyf (Assign lhs rhs _)
        = wrap Parens $ prettyf lhs • prettyf '=' • prettyf rhs
    prettyf (Lambda name t expr (Just r) pos)
        = wrap Parens
        $ prettyf '\u03BB' • prettyf name • prettyf ':' • prettyf t • prettyf '.'
        • prettyf '\n' • prettyf expr • prettyf ':' • prettyf r
    prettyf (Lambda name t expr Nothing pos)
        = wrap Parens
        $ prettyf '\u03BB' • prettyf name • prettyf ':' • prettyf t • prettyf '.'
        • prettyf '\n' • prettyf expr
    prettyf (Closure _ name t expr r pos)
        = prettyf (Lambda name t expr r pos)

instance Pretty Type where
    prettyf Bool = prettyf "Boolean"
    prettyf Int = prettyf "Int"
    prettyf String = prettyf "String"
    prettyf Unit = prettyf "Unit"
    prettyf (User x) = prettyf x
    prettyf (Arrow (t@Arrow _ _) r) = wrap Parens (prettyf t) . prettyf "->" . prettyf r
    prettyf (Arrow t r) = prettyf t . prettyf "->" . prettyf r

instance Pretty BinOp where
    prettyf And = prettyf "&&"
    prettyf Or = prettyf "||"
    prettyf Equals = prettyf "=="
    prettyf LessThan = prettyf '<'
    prettyf Plus = prettyf '+'
    prettyf Minus = prettyf '-'
    prettyf Times = prettyf '*'
    prettyf Apply = id
    prettyf Div = prettyf '/'

instance Pretty Int where
    prettyf !x = prettyf (show x)
