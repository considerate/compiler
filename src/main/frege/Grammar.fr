module punkt0.parser.Grammar where
import parser.Parser
import punkt0.Positioned
import lexer.Lexer(Lexeme())
import punkt0.lexer.Tokens as Tokens(Token(), getIdentifierString, getLiteral, isLiteral)

type Lex = Lexeme Token

literal = satisfy $ \lex ->
    case lex of
        Lexeme.Ok t _ = isLiteral t
        _ = false

tokenIdentifier = satisfy $ \lex ->
    case lex of
        Lexeme.Ok (Tokens.Identifier _) _ = true
        _ = false

token t = symbol (Lexeme.Ok t undefined)

tokenOp :: Tokens.Operator -> Parser Lex Lex
tokenOp t = token (Tokens.Op t)

tokenLit :: Tokens.Literal -> Parser Lex Lex
tokenLit t = token (Tokens.Literal t)

tokenKey :: Tokens.Keyword -> Parser Lex Lex
tokenKey t = token (Tokens.Keyword t)

tokenType :: Tokens.Type -> Parser Lex Lex
tokenType t = token (Tokens.Type t)

tokenEOF = symbol (Lexeme.EOF undefined)

data Program = Program [ClassDeclaration] MainDeclaration Position
derive Eq Program

wrapList xs = wrap "List" (joined ",") (map show xs)
wrap prefix f x = prefix ++ "(" ++ f x ++ ")"
joinPair a b = (show a) ++ "," ++ (show b)
wrapOption mx = case mx of
    Nothing = "None()"
    Just x = wrap "Some" show x

instance Show Program where
    show (Program classes main _) = wrap "Program" id $ joinPair mainMethod (wrapList classes)
        where
            mainMethod = wrap "MainDecl" show main

toProgram [] main = Program [] main main.position
toProgram (c:rest) main = Program (c:rest) main c.position

program :: Parser Lex Program
program = fmap toProgram (many classDeclaration) <*> mainDeclaration <* tokenEOF

data ClassDeclaration = Class
    { name :: Identifier
    , extends :: (Maybe Identifier)
    , vars :: [VarDeclaration]
    , methods :: [MethodDeclaration]
    , pos :: Position
    }
instance Show ClassDeclaration where
    show (Class name extends vars methods _)
        = wrap "ClassDecl" (joined ",")
            [ show name
            , wrapOption extends
            , wrapList vars
            , wrapList methods
            ]

derive Eq ClassDeclaration
derive Show MainDeclaration
derive Show VarDeclaration
derive Show MethodDeclaration
derive Show Type
instance Positioned ClassDeclaration where
    position Class{pos} = pos

wrapping start mid after = start *> mid <* after
braces mid = wrapping (token Tokens.LBrace) mid (token Tokens.RBrace)
parens mid = wrapping (token Tokens.LParen) mid (token Token.RParen)

classDeclaration :: Parser Lex ClassDeclaration
classDeclaration = do
    cls <- tokenKey Tokens.Class
    name <- identifier
    extends <- optional (tokenKey Tokens.Extends >> identifier)
    (vars, methods) <- braces $ fmap (,) (many varDeclaration) <*> (many methodDeclaration)
    return $ Class name extends vars methods cls.position

data MainDeclaration = Main
    { name :: Identifier
    , extends :: Identifier
    , vars :: [VarDeclaration]
    , body :: [Expression]
    , pos :: Position
    }
derive Eq MainDeclaration
instance Positioned MainDeclaration where
    position Main{pos} = pos

mainDeclaration :: Parser Lex MainDeclaration
mainDeclaration = do
    obj <- tokenKey Tokens.Object
    name <- identifier
    extends <- tokenKey Tokens.Extends >> identifier
    braces $ do
        vars <- many varDeclaration
        body <- list1 expression (token Tokens.SemiColon)
        return $! Main name extends vars body obj.position

data VarDeclaration = Var
    { name :: Identifier
    , varType :: Type
    , expr :: Expression
    , pos :: Position
    }
derive Eq VarDeclaration

varDeclaration :: Parser Lex VarDeclaration
varDeclaration = do
    tokenKey Tokens.Var
    name <- identifier
    token Tokens.Colon
    t <- typeParser
    tokenOp Tokens.Assign
    expr <- expression
    token Tokens.SemiColon
    return $ Var name t expr name.position

data MethodDeclaration = MethodDeclaration
    { override :: Bool
    , name :: Identifier
    , args :: [(Identifier, Type)]
    , returnType :: Type
    , vars :: [VarDeclaration]
    , exprs :: [Expression]
    , pos :: Position
    }
derive Eq MethodDeclaration

list1 :: Parser t a -> Parser t b -> Parser t [a]
list1 elem separator = (fmap (:) elem <*> many (separator *> elem))
list elem separator = list1 elem separator <|> pure []

methodDeclaration :: Parser Lex MethodDeclaration
methodDeclaration = do
        override <- (fmap isJust . optional . tokenKey) Tokens.Override
        def <- tokenKey Tokens.Def
        name <- identifier
        args <- parens parseArgs
        returnType <- token Tokens.Colon *> typeParser
        tokenOp Tokens.Assign
        (vars,exprs) <- braces
            $ fmap (,) (many varDeclaration)
            <*> (list1 expression (token Tokens.SemiColon))
        return $ MethodDeclaration override name args returnType vars exprs def.position
    where
        parseArg = do
            arg <- identifier
            token Tokens.Colon
            t <- typeParser
            return (arg, t)
        parseArgs = list parseArg (token Tokens.Comma)

data Type
    = Bool
    | Int
    | String
    | Unit
    | User {typeName :: Identifier}
derive Eq Type

typeParser :: Parser Lex Type
typeParser =
    (tokenType Tokens.BooleanType *> pure Bool)
    <|> (tokenType Tokens.IntType *> pure Int)
    <|> (tokenType Tokens.StringType *> pure String)
    <|> (tokenType Tokens.UnitType *> pure Unit)
    <|> (fmap User identifier)

data Identifier
    = ID String Position
derive Eq Identifier
instance Show Identifier where
    show (ID str _) = wrap "Identifier" id str
instance Positioned Identifier where
    position (ID _ pos) = pos

identifier :: Parser Lex Identifier
identifier =
    fmap toIdentifier tokenIdentifier
    where
        toIdentifier lex = case lex of
            (Lexeme.Ok (Tokens.Identifier str) pos) = ID str pos
            _ = error "Internal parse error"

data BinOp
    = And
    | Or
    | Equals
    | LessThan
    | Plus
    | Minus
    | Times
    | Div
derive Show BinOp
derive Eq BinOp

data Expression
    = BinOp {lhs :: Expression, op :: BinOp, rhs :: Expression, pos :: Position}
    | MethodCall Expression Identifier [Expression] Position
    | LitInt Int Position
    | LitString String Position
    | LitTrue Position
    | LitFalse Position
    | Identifier {id :: Identifier, pos :: Position}
    | LitThis Position
    | LitNull Position
    | New {obj ::Identifier, pos :: Position}
    | Not {expr :: Expression, pos :: Position}
    | Block [Expression] Position
    | If { predicate :: Expression
         , body :: Expression
         , elseBody :: (Maybe Expression)
         , pos :: Position
         }
    | While {predicate :: Expression, body :: Expression, pos :: Position}
    | Println {expr :: Expression, pos :: Position}
    | Assign {var :: Identifier, expr :: Expression, pos :: Position}
derive Eq Expression

instance Positioned Expression where
    position (BinOp _ _ _ pos) = pos
    position (MethodCall _ _ _ pos) = pos
    position (LitInt _ pos) = pos
    position (LitString _ pos) = pos
    position (LitTrue pos) = pos
    position (LitFalse pos) = pos
    position (Identifier _ pos) = pos
    position (LitThis pos) = pos
    position (LitNull pos) = pos
    position (New _ pos) = pos
    position (Not _ pos) = pos
    position (Block _ pos) = pos
    position (If _ _ _ pos) = pos
    position (While _ _ pos) = pos
    position (Println _ pos) = pos
    position (Assign _ _ pos) = pos

instance Show Expression where
    show (BinOp e op e' _) = wrap (show op) id $ joinPair e e'
    show (MethodCall obj method args _) = wrap "MethodCall" (joined ",") $ [show obj, show method, wrapList args]
    show (LitInt i _) = wrap "IntLit" show i
    show (LitString str _) = wrap "StringLit" id str
    show (LitTrue _) = "True()"
    show (LitFalse _) = "False()"
    show (LitThis _) = "This()"
    show (LitNull _) = "Null()"
    show (New obj _) = wrap "New" show obj
    show (Not expr _) = wrap "Not" show expr
    show (If pred when unless _) = wrap "If" (joined ",") [show pred, show when, wrapOption unless]
    show (While pred body _) = wrap "While" (joined ",") [show pred, show body]
    show (Block exprs _) = wrap "Block" wrapList exprs
    show (Println expr _) = wrap "Println" show expr
    show (Assign name expr _) = wrap "Assign" id $ joinPair name expr
    show (Identifier i _) = show i


binOp :: Parser Lex Expression -> Parser Lex BinOp -> Parser Lex Expression
binOp stronger op = do
        e <- stronger;
        results <- many $ fmap (,) op <*> stronger
        return $! buildOp e results
    where
        buildOp e [] = e
        buildOp e ((operator, e2):rest) = buildOp (BinOp e operator e2 e.position) rest

expression = logical

logical :: Parser Lex Expression
logical = binOp comparative op
    where
        op = (tokenOp Tokens.And *> pure And)
            <|> (tokenOp Tokens.Or *> pure Or)

comparative :: Parser Lex Expression
comparative = binOp additive op
    where
        op = (tokenOp Tokens.Equals *> pure Equals)
            <|> (tokenOp Tokens.LessThan *> pure LessThan)

additive :: Parser Lex Expression
additive = binOp multiplicative op
    where
        op = (tokenOp Tokens.Plus *> pure Plus)
            <|> (tokenOp Tokens.Minus *> pure Minus)

multiplicative = binOp methodCall op
    where
        op = (tokenOp Tokens.Times *> pure Times)
            <|> (tokenOp Tokens.Div *> pure Div)

literalToExpression :: Lex -> Expression
literalToExpression (Lexeme.Ok (Tokens.Literal (Tokens.LitInt i)) pos) = LitInt i pos
literalToExpression (Lexeme.Ok (Tokens.Literal (Tokens.LitString s)) pos) = LitString s pos
literalToExpression (Lexeme.Ok (Tokens.Literal Tokens.LitTrue) pos) = LitTrue pos
literalToExpression (Lexeme.Ok (Tokens.Literal Tokens.LitFalse) pos) = LitFalse pos
literalToExpression (Lexeme.Ok (Tokens.Literal Tokens.LitNull) pos) = LitNull pos
literalToExpression (Lexeme.Ok (Tokens.Literal Tokens.LitThis) pos) = LitThis pos
literalToExpression _ = error "Internal parse error"

methodCall :: Parser Lex Expression
methodCall = do
    obj <- simpleexpression
    calls <- many $ do
        token Tokens.Dot
        method <- identifier
        args <- parens $ list expression (token Tokens.Comma)
        return (method,args)
    return $ buildCall obj calls
    where
        buildCall obj [] = obj
        buildCall obj ((method,args):rest) = buildCall (MethodCall obj method args obj.position) rest

posFirst first rest = do
    f <- first
    v <- rest
    return $ v f.position

simpleexpression =
    (parens expression)
    <|> (posFirst (token Tokens.LBrace) $ fmap Block $ list expression (token Tokens.SemiColon) <* token Tokens.RBrace)
    <|> (fmap (literalToExpression) literal)
    <|> (posFirst (tokenKey Tokens.New) $ fmap New $ identifier <* parens (pure ()))
    <|> (posFirst (token Tokens.Bang) $ fmap Not expression)
    <|> (posFirst (tokenKey Tokens.Println) $ fmap Println $ parens expression)
    <|> ifCase
    <|> whileLoop
    <|> assign
    <|> fmap (\id -> Identifier id id.position) identifier
    where
        assign = do
            name <- identifier
            tokenOp Tokens.Assign
            expr <- expression
            return $ Assign name expr name.position
        ifCase = do
            i <- tokenKey Tokens.If
            predicate <- parens expression
            body <- expression
            elseBody <- optional (tokenKey Tokens.Else *> expression)
            return $ If predicate body elseBody i.position
        whileLoop = do
            w <- tokenKey Tokens.While
            predicate <- parens expression
            body <- expression
            return $ While predicate body w.position

