module punkt0.Main where
import Java.IO(stderr)
import lexer.Lexer (scanTokens, FileIterator, Lexeme(Bad))
import punkt0.lexer.Tokens (identifier, token, Token())
import punkt0.parser.Grammar (program, expression, simpleexpression, Program)
import frege.control.monad.trans.MonadIO
import punkt0.Context
import punkt0.Phase
import punkt0.Reporter
import Data.Traversable(traverse)
import punkt0.parser.Pretty (prettyPrint)
import punkt0.Positioned
import punkt0.ScalaShow
import punkt0.analyzer.Analyzer
import punkt0.codegen.CodeGen(compile)
import punkt0.Errors

tokens :: String -> [Lexeme Token]
tokens = (scanTokens token) . FileIterator.from

isBad (Bad _) = true
isBad _ = false

tokenPhase :: Maybe String -> Phase (String, [Lexeme Token])
tokenPhase file =
    phase $ fmap tokenize (input file)
    where
        tokenize :: String -> Accumulate [String] (String, [Lexeme Token])
        tokenize str =
            let
                tokens = (scanTokens token) . FileIterator.from $ str
                bads = filter isBad tokens
                errors = fmap (\bad -> ("invalid token at", bad)) bads
            in reportErrors str errors *> pure (str, tokens)
        input :: Maybe String -> IO String
        input file = case file of
            Nothing -> getContents
            (Just name) -> readFile name

parsePhase :: (String, [Lexeme Token]) -> Phase (String, Program)
parsePhase (input, tokens) =
    let result = program.run tokens
    in phase $ pure $
        case result of
            Left err = reportMany err
            Right ([],p) = pure (input, p)
            Right ((t:_), _) = report1 $ "unexpected" ++ scalashow t

displayHelp :: IO ()
displayHelp = println "Well. Don't ask me."

crashAndBurn :: [String] -> IO ()
crashAndBurn errors = mapM_ (stderr.println) errors >> System.exit 1

runIO :: (a -> IO ()) -> ([String] | a) -> IO ()
runIO ok result = either crashAndBurn ok result >> System.exit 0

main :: [String] -> IO ()
main args
    | otherwise =
        let
            context = parseFlags args defaultContext
            tokens = tokenPhase context.file
            parseTree = tokens >>= parsePhase
            withSymbols = parseTree >>= analysisPhase
            phases = do
                when context.help $ displayHelp >> System.exit 0
                when context.tokens $ runPhase tokens >>= runIO (mapM_ (println . scalashow) . snd)
                when context.ast $ runPhase parseTree >>= runIO (println . scalashow . snd)
                when (context.pretty && not context.symbolIds) $ runPhase parseTree >>= runIO (println . prettyPrint . snd)
                when (context.symbolIds) $ runPhase withSymbols >>= runIO (println . prettyPrint . snd)
                when context.showTypeChecked $ runPhase withSymbols >>= runIO (println . show . snd)
                runPhase withSymbols >>= runIO (\(_, program) -> compile context.outDir context.file program)
        in phases

