module punkt0.analyzer.Analyzer where
import punkt0.Reporter
import punkt0.parser.Grammar
import punkt0.Phase
import punkt0.ScalaShow
import punkt0.Typed
import punkt0.analyzer.Inheritance
import punkt0.analyzer.Symbols
import punkt0.analyzer.Names
import punkt0.analyzer.Types
import punkt0.analyzer.TypeCheck
import punkt0.analyzer.LambdaLift(closureConvert)
import Data.Traversable(traverse)

analyzer program
    = toEither (checkFunctionTypes program *> checkDependencies program)
    >>= \inheritance -> toEither (analyzeNames (closureConvert . createSymbols $ program))
    >>= \(interfaces, program') -> toEither (typecheck (inheritance, interfaces, Nothing) program')

checkFunctionTypes :: Program -> Analyze ()
checkFunctionTypes (Program _ functions _ pos)
    = traverse checkFunction functions *> pure ()
    where
        checkFunction (Function{expr}) = hasFnType expr
        hasFnType (Lambda _ t expr (Just r) _) = pure ()
        hasFnType (Lambda _ t expr Nothing _) = hasFnType expr
        hasFnType expr = report1 $ TypeError $ CannotDeduceType expr

runAnalyzer = fmap analyzer . (parseCode program)

analysisPhase :: (String, Program) -> Phase (String, Program)
analysisPhase (input, program)
    = phase $ case analyzer program of
        Right a -> pure $ ARight (input, a)
        Left errors -> pure $ ALeft (fmap (showAnalyzeError input) errors)

main :: [String] -> IO ()
main [] = getContents >>= print . runAnalyzer
main (file:_) = readFile file >>= print . runAnalyzer
