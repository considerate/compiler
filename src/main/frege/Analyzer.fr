module punkt0.Analyzer where
import Data.HashMap
import punkt0.Reporter
import Data.Traversable(traverse)
import Data.List(sort)

-- | Simulate HashSet using a HashMap with values as unit ()
type HashSet a = HashMap a ()

add :: Eq a => a -> HashSet a -> HashSet a
add x = insert x ()

type ClassName = String
type Extends a = HashMap a a
type Inheritance a = HashMap a [a]

-- | Find missing classes
missing :: (Show a, Eq a) => a -> Extends a -> Accumulate [String] ()
missing baseClass extends = traverse checkExists extends *> pure ()
    where
        checkExists super
            | super == baseClass = pure ()
            | otherwise = maybe (report1 $ "No such class "++ show super) (const $ pure ()) (lookup super extends)

-- | Expand inheritance chain
inheritance :: Eq a => a -> Extends a -> Inheritance a
inheritance baseClass extends = result
    where
        result = mapValues supers extends
        supers super = maybe [super] (super :) (lookup super result)

-- | Verify non-existance of circular dependencies
cycleChecks :: (Eq a, Show a, Ord a) => Inheritance a -> Accumulate [String] (Inheritance a)
cycleChecks map = traverse (\clas -> report1 $ "The class "++show clas++" has cyclic dependencies") (sort $ keys withCycles) *> pure map
    where
        -- set of all classes that have circular dependencies
        withCycles = foldWithKey findCycles empty map
        findCycles :: Eq a => HashSet a -> a -> [a] -> HashSet a
        findCycles cycles c supers
            = if c `member` cycles
                then cycles
                else cycles `union` cycleCheck empty (c:supers)
        -- check for cycle in list of classes
        cycleCheck :: Eq a => HashSet a -> [a] -> HashSet a
        cycleCheck _ [] = empty -- no cycle found, return empty set
        cycleCheck visited (c:cs)
            = if member c visited -- if the class has already been visited there's a cycle
                then visited -- return set of all visited classes so far (all of them must be cyclic)
                else cycleCheck (add c visited) cs

